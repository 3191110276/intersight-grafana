apiVersion: grizzly.grafana.com/v1alpha1
kind: Dashboard
metadata:
    folder: is_dnet_domain
    name: is_dnet_domain_traffic_congestion
spec:
    annotations:
        list:
            - builtIn: 1
              datasource:
                type: grafana
                uid: -- Grafana --
              enable: true
              hide: true
              iconColor: rgba(0, 211, 255, 1)
              name: Annotations & Alerts
              type: dashboard
    editable: true
    fiscalYearStartMonth: 0
    graphTooltip: 0
    links: []
    panels:
        - datasource:
            type: datasource
            uid: grafana
          fieldConfig:
            defaults:
                thresholds:
                    mode: absolute
                    steps:
                        - color: transparent
            overrides: []
          gridPos:
            h: 4
            w: 24
            x: 0
            "y": 0
          id: 1
          options:
            afterRender: |-
                function row_iteration(structure, current) {
                  const row = add_row();
                  structure.forEach(function (item) {
                    selected = false;
                    if (item['name'] == current[0]) {
                      selected = true;
                    }
                    new_button = add_button(item["name"], item["link"], selected, item["children"])
                    row.append(new_button)
                    if (selected) {
                      if (item['children'].length > 0) {
                        row_iteration(item['children'], current.slice(1))
                      }
                    }
                  });
                }

                function add_row() {
                  const container = document.getElementById("container");
                  const newDiv = document.createElement('div');
                  newDiv.classList.add('row');
                  container.appendChild(newDiv);

                  return newDiv
                }

                function add_button(name, link, selected, children) {
                  const newDiv = document.createElement('div');
                  newDiv.classList.add('button');
                  if (selected) { newDiv.classList.add('button-active'); }
                  newDiv.textContent = name;
                  newDiv.onclick = function () {
                    const url = new URL(window.location.href);
                    const params = new URLSearchParams(url.search);
                    if (link == "") {
                      children.forEach(function (item) {
                        if (item["name"] == current_item[current_item.length - 1]) {
                          link = item["link"]
                        }
                      });
                    }

                    if (link == "") {
                      if (children[0]["link"] == "") {
                        link = children[0]["children"][0]["link"]
                      } else {
                        link = children[0]["link"]
                      }
                    }
                    window.location.href = '/d/' + link + '?' + params.toString();
                  };

                  return newDiv
                }

                const platform_type_selector = document.getElementById('platform_type_selector');

                platform_type_selector.onchange = function () {
                  const selectedValue = platform_type_selector.value;
                  alert('You selected: ' + selectedValue);
                };

                container = document.getElementById("container");
                if (container) {
                  container.innerHTML = '';
                } else {
                  const newDiv = document.createElement('div');
                  newDiv.id = 'container'
                  document.body.append(newDiv)
                }

                structure = nav[current_item[0]]
                row_iteration(structure, current_item.slice(1))
            content: |-
                <div id="container"></div>
                <div id="platform_type">
                  Platform Type:
                  <select name="platform_type_selector" id="platform_type_selector">
                        <option value="overview">Overview</option>
                        <option value="domain" selected>Domain</option>
                        <option value="standalone">Standalone</option>
                        <option value="edge">Unified Edge</option>
                      </select>
                </div>
            contentPartials: []
            defaultContent: The query didn't return any results.
            editor:
                format: auto
                language: html
            editors:
                - styles
                - helpers
                - afterRender
            externalStyles: []
            helpers: |-
                current_item = ["domain", "Network", "Domain", "Congestion"]

                nav = {
                  "overview": [
                    { "name": "Overview", "link": "is_overview", "children": [] },
                    { "name": "Network", "link": "", "children": [] },
                    {
                      "name": "Environmental", "link": "", "children": []
                    }
                  ],
                  "domain": [
                    { "name": "Overview", "link": "is_overview", "children": [] },
                    {
                      "name": "Network", "link": "", "children": [
                        {
                          "name": "Domain", "link": "", "children": [
                            { "name": "Overview", "link": "is_dnet_domain_traffic_overview", "children": [] },
                            { "name": "Utilization %", "link": "is_dnet_domain_traffic_util_percent", "children": [] },
                            { "name": "Utilization bps", "link": "is_dnet_domain_traffic_util_bps", "children": [] },
                            { "name": "Congestion", "link": "is_dnet_domain_traffic_congestion", "children": [] },
                            { "name": "Errors", "link": "is_dnet_domain_traffic_errors", "children": [] }
                          ]
                        },
                        {
                          "name": "Chassis", "link": "", "children": [
                            { "name": "Overview", "link": "is_dnet_chassis_traffic_overview", "children": [] },
                            { "name": "Utilization %", "link": "is_dnet_chassis_traffic_util_percent", "children": [] },
                            { "name": "Utilization bps", "link": "is_dnet_chassis_traffic_util_bps", "children": [] },
                            { "name": "Congestion", "link": "is_dnet_chassis_traffic_congestion", "children": [] },
                            { "name": "Errors", "link": "is_dnet_chassis_traffic_errors", "children": [] }
                          ]
                        },
                        {
                          "name": "Server", "link": "", "children": [
                            { "name": "Overview", "link": "is_dnet_server_traffic_overview", "children": [] },
                            { "name": "Utilization %", "link": "is_dnet_server_traffic_util_percent", "children": [] },
                            { "name": "Utilization bps", "link": "is_dnet_server_traffic_util_bps", "children": [] },
                            { "name": "Congestion", "link": "is_dnet_server_traffic_congestion", "children": [] },
                            { "name": "Errors", "link": "is_dnet_server_traffic_errors", "children": [] }
                          ]
                        }
                      ]
                    },
                    {
                      "name": "Environmental", "link": "", "children": [
                        { "name": "Domain", "link": "is_environmental_domain", "children": [] },
                        { "name": "Chassis", "link": "is_environmental_chassis", "children": [] }
                      ]
                    }
                  ],
                  "standalone": [],
                  "edge": []
                }
            renderMode: data
            styles: |
                .row {
                  display: flex;
                  gap: max(4vw, 10px);
                  border-bottom: 1px solid white;
                  margin: 0 0 5px 8px;
                  padding: 0 0 5px 0;
                }

                #platform_type {
                  position: absolute;
                  right: 8px;
                  top: 8px;
                }

                #platform_type select {
                  height: 28px;
                  width: 120px;
                  border: 1px solid white;
                }

                .button {
                  padding: 4px 10px;
                  background-color: #1e60c4;
                  width: 128px;
                  height: 29px;
                  border-radius: 10px;
                  text-align: center;
                  vertical-align: middle;
                  cursor: pointer;
                }

                .button-active {
                  background-color: #8f3bb8;
                }
            wrap: false
          pluginVersion: 5.7.0
          targets:
            - datasource:
                type: datasource
                uid: grafana
              queryType: randomWalk
              refId: A
          title: ""
          transparent: true
          type: marcusolsson-dynamictext-panel
        - fieldConfig:
            defaults: {}
            overrides: []
          gridPos:
            h: 2
            w: 24
            x: 0
            "y": 4
          id: 2
          options:
            code:
                language: plaintext
                showLineNumbers: false
                showMiniMap: false
            content: '# TO IMPLEMENT'
            mode: markdown
          pluginVersion: 12.0.0-85820.patch2-86140
          title: ""
          type: text
    preload: false
    schemaVersion: 41
    tags: []
    templating:
        list: []
    time:
        from: now-6h
        to: now
    timepicker: {}
    timezone: browser
    title: 'Domain Traffic Verification: Congestion'
    uid: is_dnet_domain_traffic_congestion
